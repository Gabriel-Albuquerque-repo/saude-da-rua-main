service: saude-da-rua-main
frameworkVersion: "2 || 3"

provider:
    name: aws
    runtime: nodejs14.x
    region: sa-east-1
    stage: dev
    httpApi:
        cors: true
        authorizers:
            jwtAuthenticationLambda:
                type: request
                functionName: authenticationProxy
            jwtAuthorizationLambda:
                type: request
                functionName: authorizationProxy
    environment:
        region: ${self:provider.region}
        ADMINS_TABLE_NAME: ${self:custom.adminsTableName}
        VOLUNTEERS_TABLE_NAME: ${self:custom.volunteersTableName}
        FILE_TABLE_NAME: ${self:custom.filesTableName}
        FILE_BUCKET_NAME: ${self:custom.filesBucketName}
        SEND_EMAIL_TOPIC_NAME: ${self:custom.sendEmailTopicName}
        ACCOUNT_ID: ${aws:accountId}
    iam:
     role:
        statements:
          - Effect: Allow
            Action:
              - s3:*
              - dynamodb:*
            Resource: "*"

custom:
    adminsTableName: Admins-Table
    volunteersTableName: Volunteers-Table
    sendEmailTopicName: Send-Email
    filesTableName: File-Table
    filesBucketName: fileuploadbucket-123-yungli
    dynamodb:
        stages:
            - dev
        start:
            port: 8000
            inMemory: true
            migrate: true
        migration:
            dir: tests/in-memory/migrations

functions:
    authenticationProxy:
        name: lambda-authenticate
        handler: src/lambdas/AuthenticateAdminProxy.handler
    authorizationProxy:
        name: lambda-authorize
        handler: src/lambdas/AuthenticateAndAuthorizationAdminProxy.handler
    loginAdmin:
        name: login-admin
        handler: src/lambdas/LoginAdmin.handler
        events:
            - httpApi:
                  path: /login
                  method: POST
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "dynamodb:Query"
              Resource:
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.adminsTableName}"
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.adminsTableName}/index/email"
    createAdmin:
        name: create-admin
        handler: src/lambdas/CreateAdmin.handler
        events:
            - httpApi:
                  path: /create/admin
                  method: POST
                  authorizer:
                      name: jwtAuthorizationLambda
                      type: request
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "dynamodb:Query"
                  - "dynamodb:PutItem"
              Resource:
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.adminsTableName}"
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.adminsTableName}/index/email"
    createVolunteer:
        name: create-volunteer
        handler: src/lambdas/CreateVolunteer.handler
        events:
            - httpApi:
                  path: /create/volunteer
                  method: POST
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "dynamodb:Query"
                  - "dynamodb:PutItem"
                  - "sns:Publish"
              Resource:
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.volunteersTableName}"
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.volunteersTableName}/index/email"
                  - "arn:aws:sns:${aws:region}:${aws:accountId}:${self:custom.sendEmailTopicName}"

    deleteFile:
        name: delete-file
        handler: src/lambdas/DeleteFile.handler
        events:
            - httpApi:
                  path: /file/{fileId}
                  method: DELETE
                  authorizer:
                      name: jwtAuthorizationLambda
                      type: request
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "dynamodb:Query"
                  - "dynamodb:DeleteItem"
                  - "s3:*"
              Resource:
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.filesTableName}"
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.filesTableName}/index/email"
                  - "arn:aws:s3:::*"

    createFile:
        name: create-file
        handler: src/lambdas/CreateFile.handler
        events:
            - httpApi:
                  path: /file/{fileType}
                  method: POST
                  authorizer:
                      name: jwtAuthorizationLambda
                      type: request
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "dynamodb:Query"
                  - "dynamodb:PutItem"
                  - "s3:*"
              Resource:
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.filesTableName}"
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.filesTableName}/index/email"
                  - "arn:aws:s3:::*"

    listFiles:
        name: list-files
        handler: src/lambdas/ListFiles.handler
        events:
            - httpApi:
                  path: /file/{fileType}
                  method: GET
                  authorizer:
                      name: jwtAuthorizationLambda
                      type: request
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "dynamodb:Query"
              Resource:
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.filesTableName}"
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.filesTableName}/index/email"

    getVolunteers:
        name: get-volunteers
        handler: src/lambdas/GetVolunteers.handler
        events:
            - httpApi:
                  path: /get/volunteers
                  method: GET
                  authorizer:
                      name: jwtAuthenticationLambda
                      type: request
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "dynamodb:Scan"
              Resource:
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.volunteersTableName}"
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.volunteersTableName}/index/email"
    getOneVolunteer:
        name: get-one-volunteer
        handler: src/lambdas/GetOneVolunteer.handler
        events:
            - httpApi:
                  path: /get/one_volunteer
                  method: GET
                  authorizer:
                      name: jwtAuthenticationLambda
                      type: request
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "dynamodb:Query"
              Resource:
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.volunteersTableName}"
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.volunteersTableName}/index/email"
    sendEmailToVolunteer:
        name: send-email-to-volunteer
        handler: src/lambdas/SendEmailToVolunteer.handler
        events:
            - sns:
                  topicName: ${self:custom.sendEmailTopicName}
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "sns:*"
              Resource:
                  - "arn:aws:sns:${aws:region}:${aws:accountId}:${self:custom.sendEmailTopicName}"
    verifyVolunteerEmail:
        name: verify-volunteer-email
        handler: src/lambdas/VerifyVolunteerEmail.handler
        events:
            - httpApi:
                  path: /verify/volunteer-email
                  method: GET
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "dynamodb:UpdateItem"
              Resource:
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.volunteersTableName}"
                  - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.volunteersTableName}/index/email"
                  - "arn:aws:sns:${aws:region}:${aws:accountId}:${self:custom.sendEmailTopicName}"

plugins:
    - serverless-plugin-typescript
    - serverless-dotenv-plugin
    - serverless-iam-roles-per-function
    - serverless-dynamodb-local
    - serverless-offline

resources:
    Resources:
        ImageUploadBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.filesBucketName}
                AccessControl: PublicRead
        AdminsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.adminsTableName}
                AttributeDefinitions:
                    - AttributeName: email
                      AttributeType: S
                KeySchema:
                    - AttributeName: email
                      KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
        VolunteersTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.volunteersTableName}
                AttributeDefinitions:
                    - AttributeName: email
                      AttributeType: S
                KeySchema:
                    - AttributeName: email
                      KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
        FilesTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.filesTableName}
                AttributeDefinitions:
                    - AttributeName: fileType
                      AttributeType: S
                    - AttributeName: fileId
                      AttributeType: S
                KeySchema:
                    - AttributeName: fileType
                      KeyType: HASH
                    - AttributeName: fileId
                      KeyType: RANGE
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1

