service: saude-da-rua-main
frameworkVersion: "2 || 3"

provider:
    name: aws
    runtime: nodejs14.x
    region: sa-east-1
    stage: dev
    httpApi:
        cors: true
        authorizers:
            jwtAuthenticationLambda:
                type: request
                functionName: authenticationProxy
            jwtAuthorizationLambda:
                type: request
                functionName: authorizationProxy
    lambdaHashingVersion: 20201221
    environment:
        region: ${self:provider.region}
        FILE_BUCKET_NAME: ${self:custom.filesBucketName}
        SEND_EMAIL_TOPIC_NAME: ${self:custom.sendEmailTopicName}
        ACCOUNT_ID: ${aws:accountId}
        INSTAGRAM_TOKEN: ${env:INSTAGRAM_TOKEN}
    iamRoleStatements:
        - Effect: Allow
          Action:
              - s3:*
          Resource: "*"

custom:
    sendEmailTopicName: Send-Email
    # I'll keep this in case we use RDS in the future

    #dbMasterUsername: "postgres"
    #dbMasterPassword: "saudedarua"
    #dbName: "saudedarua"
    #dbHost: "!GetAtt SaudeDaRuaPostgresDatabase.Endpoint.Host"
    #dbPort: "!GetAtt SaudeDaRuaPostgresDatabase.Endpoint.Port"
    filesBucketName: fileuploadbucket-123-lagum

functions:
    authenticationProxy:
        name: lambda-authenticate
        handler: src/lambdas/AuthenticateAdminProxy.handler
    authorizationProxy:
        name: lambda-authorize
        handler: src/lambdas/AuthenticateAndAuthorizationAdminProxy.handler
    loginAdmin:
        name: login-admin
        handler: src/lambdas/LoginAdmin.handler
        events:
            - http:
                  path: /login
                  method: POST
    createAdmin:
        name: create-admin
        handler: src/lambdas/CreateAdmin.handler
        events:
            - http:
                  path: /create/admin
                  method: POST
                  authorizer:
                      name: jwtAuthorizationLambda
                  localAuthorizer:
                      name: "mylocalAuthProxyFn"
                      type: "request"
    createVolunteer:
        name: create-volunteer
        handler: src/lambdas/CreateVolunteer.handler
        events:
            - http:
                  path: /create/volunteer
                  method: POST
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "sns:Publish"
              Resource:
                  - "arn:aws:sns:${aws:region}:${aws:accountId}:${self:custom.sendEmailTopicName}"
    deleteFile:
        name: delete-file
        handler: src/lambdas/DeleteFile.handler
        events:
            - http:
                  path: /file/{fileId}
                  method: DELETE
                  authorizer:
                     name: jwtAuthorizationLambda
                  localAuthorizer:
                      name: "mylocalAuthProxyFn"
                      type: "request"
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "s3:*"
              Resource:
                  - "arn:aws:s3:::*"
    createFile:
        name: create-file
        handler: src/lambdas/CreateFile.handler
        events:
            - http:
                  path: /file/{fileType}
                  method: POST
                  authorizer:
                      name: jwtAuthorizationLambda
                  localAuthorizer:
                      name: "mylocalAuthProxyFn"
                      type: "request"
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "s3:*"
              Resource:
                  - "arn:aws:s3:::*"
    listFiles:
        name: list-files
        handler: src/lambdas/ListFiles.handler
        events:
            - http:
                  path: /file/{fileType}
                  method: GET
                  authorizer:
                      name: jwtAuthorizationLambda
                  localAuthorizer:
                      name: "mylocalAuthProxyFn"
                      type: "request"
    getVolunteers:
        name: get-volunteers
        handler: src/lambdas/GetVolunteers.handler
        events:
            - http:
                  path: /get/volunteers
                  method: GET
                  authorizer:
                      name: jwtAuthenticationLambda
                  localAuthorizer:
                      name: "mylocalAuthProxyFn"
                      type: "request"
    getInstagramToken:
        name: get-instagram-INSTAGRAM_TOKEN
        handler: src/lambdas/GetInstagramToken.handler
        events:
            - http:
                  path: /get/instagram-token
                  method: GET

    getOneVolunteer:
        name: get-one-volunteer
        handler: src/lambdas/GetOneVolunteer.handler
        events:
            - http:
                  path: /get/one_volunteer
                  method: GET
                  localAuthorizer:
                      name: "mylocalAuthProxyFn"
                      type: "request"
    getAuthenticatedUser:
        name: get-authenticated-user
        handler: src/lambdas/GetAuthenticatedAdmin.handler
        events:
            - http:
                  path: /get/admin/me
                  method: GET
                  authorizer:
                       name: jwtAuthenticationLambda
                  localAuthorizer:
                      name: "mylocalAuthProxyFn"
                      type: "request"
    sendEmailToVolunteer:
        name: send-email-to-volunteer
        handler: src/lambdas/SendEmailToVolunteer.handler
        events:
            - sns:
                  topicName: ${self:custom.sendEmailTopicName}
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "sns:*"
              Resource:
                  - "arn:aws:sns:${aws:region}:${aws:accountId}:${self:custom.sendEmailTopicName}"
    verifyVolunteerEmail:
        name: verify-volunteer-email
        handler: src/lambdas/VerifyVolunteerEmail.handler
        events:
            - http:
                  path: /verify/volunteer-email
                  method: GET
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "sns:Publish"
              Resource:
                  - "arn:aws:sns:${aws:region}:${aws:accountId}:${self:custom.sendEmailTopicName}"

plugins:
    - serverless-esbuild
    - serverless-dotenv-plugin
    - serverless-iam-roles-per-function
    - serverless-offline-local-authorizers-plugin
    - serverless-offline

resources:
    Resources:
        ImageUploadBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.filesBucketName}
                AccessControl: PublicRead
    # I'll keep this in case we use RDS in the future
    #SaudeDaRuaPostgresDatabase:
    #    Type: AWS::RDS::DBInstance
    #    Properties:
    #        MasterUsername: ${self:custom.dbMasterUsername}
    #        MasterUserPassword: ${self:custom.dbMasterPassword}
    #        DBInstanceClass: db.t4g.nano
    #        Engine: postgres
    #        EngineVersion: "12"
    #        AllocatedStorage: "1"
    #        DBName: ${self:custom.dbName}
package:
    patterns:
        - "prisma/schema.prisma"
        - "node_modules/.prisma"
        - "!node_modules/.prisma/client/libquery_engine-*"
        - "node_modules/.prisma/client/libquery_engine-rhel-*"
        - "!node_modules/prisma/libquery_engine-*"
        - "!node_modules/@prisma/engines/**"