service: saude-da-rua-main
frameworkVersion: "2 || 3"
useDotenv: true

provider:
    name: aws
    runtime: nodejs14.x
    region: sa-east-1
    stage: dev
    httpApi:
        cors: true
        authorizers:
            jwtAuthenticationLambda:
                type: request
                functionName: authenticationProxy
            jwtAuthorizationLambda:
                type: request
                functionName: authorizationProxy
    lambdaHashingVersion: 20201221
    environment:
        region: ${self:provider.region}
        FILE_BUCKET_NAME: ${env:FILE_BUCKET_NAME}
        SEND_EMAIL_TOPIC_NAME: ${self:custom.sendEmailTopicName}
        ACCOUNT_ID: ${aws:accountId}
        TOKEN_ONE: ${env:TOKEN_ONE}
        TOKEN_TWO: ${env:TOKEN_TWO}
        USER_NODEMAILER_GMAIL: ${env:USER_NODEMAILER_GMAIL}
        PASSWORD_NODEMAILER_GMAIL: ${env:PASSWORD_NODEMAILER_GMAIL}
        ADMIN_JWT_LIFE_CYCLE: 30d
        ADMIN_JWT_SECRET_KEY: ${env:ADMIN_JWT_SECRET_KEY}
        VOLUNTEER_JWT_LIFE_CYCLE: 30d
        VOLUNTEER_JWT_SECRET_KEY: ${env:VOLUNTEER_JWT_SECRET_KEY}
        DATABASE_URL: ${env:DATABASE_URL}
        INSTAGRAM_APP_ID: ${env:INSTAGRAM_APP_ID}
        INSTAGRAM_APP_SECRET: ${env:INSTAGRAM_APP_SECRET}
        INSTAGRAM_APP_REDIRECT_URI: ${env:INSTAGRAM_APP_REDIRECT_URI}
    iamRoleStatements:
        - Effect: Allow
          Action:
              - s3:*
          Resource: "*"

custom:
    sendEmailTopicName: Send-Email
    # I'll keep this in case we use RDS in the future

    #dbMasterUsername: "postgres"
    #dbMasterPassword: "saudedarua"
    #dbName: "saudedarua"
    #dbHost: "!GetAtt SaudeDaRuaPostgresDatabase.Endpoint.Host"
    #dbPort: "!GetAtt SaudeDaRuaPostgresDatabase.Endpoint.Port"
    filesBucketName: ${env:FILE_BUCKET_NAME}
    prune:
        automatic: true
        number: 3

functions:
    authenticationProxy:
        name: lambda-authenticate
        handler: src/infra/lambda/handlers/AuthenticateAdminProxy.handler
    authorizationProxy:
        name: lambda-authorize
        handler: src/infra/lambda/handlers/AuthenticateAndAuthorizationAdminProxy.handler
    loginAdmin:
        name: login-admin
        handler: src/infra/lambda/handlers/LoginAdmin.main
        events:
            - httpApi:
                  path: /login
                  method: POST
    createAdmin:
        name: create-admin
        handler: src/infra/lambda/handlers/CreateAdmin.main
        events:
            - httpApi:
                  path: /create/admin
                  method: POST
                  authorizer:
                      name: jwtAuthorizationLambda
    updatePixKey:
        name: update-pix-key
        handler: src/infra/lambda/handlers/UpdatePixKey.main
        events:
            - httpApi:
                  path: /pix
                  method: PUT
                  authorizer:
                      name: jwtAuthorizationLambda
    createVolunteer:
        name: create-volunteer
        handler: src/infra/lambda/handlers/CreateVolunteer.main
        events:
            - httpApi:
                  path: /create/volunteer
                  method: POST
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "sns:Publish"
              Resource:
                  - "arn:aws:sns:${aws:region}:${aws:accountId}:${self:custom.sendEmailTopicName}"
    deleteVolunteer:
        name: delete-volunteer
        handler: src/infra/lambda/handlers/DeleteVolunteer.main
        events:
            - httpApi:
                  path: /volunteers/{id}
                  method: DELETE
                  authorizer:
                      name: jwtAuthorizationLambda
    deleteFile:
        name: delete-file
        handler: src/infra/lambda/handlers/DeleteFile.main
        events:
            - httpApi:
                  path: /file/{fileId}
                  method: DELETE
                  authorizer:
                      name: jwtAuthorizationLambda
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "s3:*"
              Resource:
                  - "arn:aws:s3:::*"
    deleteAdmin:
        name: delete-admin
        handler: src/infra/lambda/handlers/DeleteAdmin.main
        events:
            - httpApi:
                  path: /admin/{adminId}
                  method: DELETE
                  authorizer:
                      name: jwtAuthorizationLambda
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "s3:*"
              Resource:
                  - "arn:aws:s3:::*"
    updateAdminPermissions:
        name: update-admin-permissions
        handler: src/infra/lambda/handlers/UpdateAdminPermissionLevel.main
        events:
            - httpApi:
                  path: /admin/{adminId}/level/{adminLevel}
                  method: PATCH
                  authorizer:
                      name: jwtAuthorizationLambda
    createFile:
        name: create-file
        handler: src/infra/lambda/handlers/CreateFile.main
        events:
            - httpApi:
                  path: /file/{fileType}
                  method: POST
                  authorizer:
                      name: jwtAuthorizationLambda
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "s3:*"
              Resource:
                  - "arn:aws:s3:::*"
    listFiles:
        name: list-files
        handler: src/infra/lambda/handlers/ListFiles.main
        events:
            - httpApi:
                  path: /file/{fileType}
                  method: GET

    getVolunteers:
        name: get-volunteers
        handler: src/infra/lambda/handlers/GetVolunteers.main
        events:
            - httpApi:
                  path: /volunteers
                  method: GET
                  authorizer:
                      name: jwtAuthenticationLambda

    listAdmins:
        name: list-admins
        handler: src/infra/lambda/handlers/ListAdmins.main
        events:
            - httpApi:
                  path: /admins
                  method: GET
                  authorizer:
                      name: jwtAuthenticationLambda
    getInstagramToken:
        name: get-instagram-INSTAGRAM_TOKEN
        handler: src/infra/lambda/handlers/GetInstagramToken.main
        events:
            - httpApi:
                  path: /get/instagram-token
                  method: GET
    getLongLivedToken:
        name: get-long-lived-token
        handler: src/infra/lambda/handlers/GetLongLivedToken.main
        events:
            - httpApi:
                  path: /get/long-lived-token
                  method: GET
    getPixKey:
        name: get-pix-key
        handler: src/infra/lambda/handlers/GetPixKey.main
        events:
            - httpApi:
                  path: /pix
                  method: GET
    refreshLongLivedToken:
        name: refresh-long-lived-token
        handler: src/infra/lambda/handlers/RefreshLongLivedToken.main
        events:
            - schedule: rate(1 day)
    getOneVolunteer:
        name: get-one-volunteer
        handler: src/infra/lambda/handlers/GetOneVolunteer.main
        events:
            - httpApi:
                  path: /volunteer/{id}
                  method: GET
                  authorizer:
                      name: jwtAuthenticationLambda
    getAuthenticatedUser:
        name: get-authenticated-user
        handler: src/infra/lambda/handlers/GetAuthenticatedAdmin.main
        events:
            - httpApi:
                  path: /get/admin/me
                  method: GET
                  authorizer:
                      name: jwtAuthenticationLambda
    updateVolunteer:
        name: update-volunteer
        handler: src/infra/lambda/handlers/UpdateVolunteer.main
        events:
            - httpApi:
                  path: /volunteers/{id}
                  method: PATCH
                  authorizer:
                      name: jwtAuthenticationLambda
    createMedicines:
        name: create-medicines
        handler: src/infra/lambda/handlers/CreateMedicines.main
        events:
            - httpApi:
                  path: /medicines
                  method: POST
    listMedicines:
        name: list-medicines
        handler: src/infra/lambda/handlers/ListMedicines.main
        events:
            - httpApi:
                  path: /medicines
                  method: GET
                  authorizer:
                      name: jwtAuthenticationLambda
    getMedicine:
        name: get-medicine
        handler: src/infra/lambda/handlers/GetMedicine.main
        events:
            - httpApi:
                  path: /medicines/{id}
                  method: GET
                  authorizer:
                      name: jwtAuthenticationLambda
    deleteMedicine:
        name: delete-medicine
        handler: src/infra/lambda/handlers/DeleteMedicine.main
        events:
            - httpApi:
                  path: /medicines/{id}
                  method: DELETE
                  authorizer:
                      name: jwtAuthenticationLambda
    sendEmailToVolunteer:
        name: send-email-to-volunteer
        handler: src/infra/lambda/handlers/SendEmailToVolunteer.main
        events:
            - sns:
                  topicName: ${self:custom.sendEmailTopicName}
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "sns:*"
              Resource:
                  - "arn:aws:sns:${aws:region}:${aws:accountId}:${self:custom.sendEmailTopicName}"
    verifyVolunteerEmail:
        name: verify-volunteer-email
        handler: src/infra/lambda/handlers/VerifyVolunteerEmail.main
        events:
            - httpApi:
                  path: /verify/volunteer-email
                  method: GET
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - "sns:Publish"
              Resource:
                  - "arn:aws:sns:${aws:region}:${aws:accountId}:${self:custom.sendEmailTopicName}"

plugins:
    - serverless-prune-plugin
    - serverless-esbuild
    - serverless-iam-roles-per-function
    - serverless-offline

resources:
    Resources:
        ImageUploadBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.filesBucketName}
                AccessControl: PublicRead
    # I'll keep this in case we use RDS in the future
    #SaudeDaRuaPostgresDatabase:
    #    Type: AWS::RDS::DBInstance
    #    Properties:
    #        MasterUsername: ${self:custom.dbMasterUsername}
    #        MasterUserPassword: ${self:custom.dbMasterPassword}
    #        DBInstanceClass: db.t4g.nano
    #        Engine: postgres
    #        EngineVersion: "12"
    #        AllocatedStorage: "1"
    #        DBName: ${self:custom.dbName}
package:
    individually: true
    patterns:
        - "prisma/schema.prisma"
        - "node_modules/.prisma"
        - "!node_modules/.prisma/client/libquery_engine-*"
        - "node_modules/.prisma/client/libquery_engine-rhel-*"
        - "!node_modules/prisma/libquery_engine-*"
        - "!node_modules/@prisma/engines/**"
